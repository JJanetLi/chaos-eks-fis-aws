kind: ServiceAccount
apiVersion: v1
metadata:
  namespace: ecommerce-app
  name: chaos-experiment
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: ecommerce-app
  name: chaos-experiment
rules:

# FIS
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "create", "patch", "delete", "post"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create", "get", "delete", "deletecollection", "list"]
- apiGroups: [""]
  resources: ["pods/ephemeralcontainers"]
  verbs: ["update"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get"]

# Litmus Pod Delete
- apiGroups: [""]
  resources: ["pods","events"]
  verbs: ["create","list","get","patch","update","delete","deletecollection"]
- apiGroups: [""]
  resources: ["pods/exec","pods/log","replicationcontrollers"]
  verbs: ["create","list","get"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create","list","get","delete","deletecollection"]
- apiGroups: ["apps"]
  resources: ["deployments","statefulsets","daemonsets","replicasets"]
  verbs: ["list","get"]
- apiGroups: ["apps.openshift.io"]
  resources: ["deploymentconfigs"]
  verbs: ["list","get"]
- apiGroups: ["argoproj.io"]
  resources: ["rollouts"]
  verbs: ["list","get"]
- apiGroups: ["litmuschaos.io"]
  resources: ["chaosengines","chaosexperiments","chaosresults"]
  verbs: ["create","list","get","patch","update"]
  
# Litmus Pod CPU Hog Exec
# Create and monitor the experiment & helper pods
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update", "deletecollection"]
# Performs CRUD operations on the events inside chaosengine and chaosresult
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create","get","list","patch","update"]
# Fetch configmaps details and mount it to the experiment pod (if specified)
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get","list",]
# Track and get the runner, experiment, and helper pods log 
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]  
# for creating and managing to execute comands inside target container
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["get","list","create"]
# deriving the parent/owner details of the pod(if parent is anyof {deployment, statefulset, daemonsets})
- apiGroups: ["apps"]
  resources: ["deployments","statefulsets","replicasets", "daemonsets"]
  verbs: ["list","get"]
# deriving the parent/owner details of the pod(if parent is deploymentConfig)  
- apiGroups: ["apps.openshift.io"]
  resources: ["deploymentconfigs"]
  verbs: ["list","get"]
# deriving the parent/owner details of the pod(if parent is deploymentConfig)
- apiGroups: [""]
  resources: ["replicationcontrollers"]
  verbs: ["get","list"]
# deriving the parent/owner details of the pod(if parent is argo-rollouts)
- apiGroups: ["argoproj.io"]
  resources: ["rollouts"]
  verbs: ["list","get"]
# for configuring and monitor the experiment job by the chaos-runner pod
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create","list","get","delete","deletecollection"]
# for creation, status polling and deletion of litmus chaos resources used within a chaos workflow
- apiGroups: ["litmuschaos.io"]
  resources: ["chaosengines","chaosexperiments","chaosresults"]
  verbs: ["create","list","get","patch","update","delete"]
    
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chaos-experiment
  namespace: ecommerce-app
subjects:
- kind: ServiceAccount
  name: chaos-experiment
  namespace: ecommerce-app
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: chaos-experiment
roleRef:
  kind: Role
  name: chaos-experiment
  apiGroup: rbac.authorization.k8s.io